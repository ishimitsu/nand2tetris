// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Check instruction A(address) or C(calculate)
    // InstA: 0vvvvvvvvvvvvvvv, v1..15 set to A register
    // InstC: 111accccccdddjjj
    And(a=instruction[15], b=true, out=InstC);
    Not(in=InstC, out=InstA);

    // instC: 111accccccdddjjj
    // a=0: refer A Register value, a=1: refer Memory[A] value
    And(a=instruction[12], b=InstC, out=RefM);

    // Set A Register
    // InstA: Set instruction=0vvvvvvvvvvvvvv to A Register
    // InstC: if d1=1, store ALU result to A Register    
    And(a=instruction[5], b=InstC, out=D1);   
    Mux16(a=instruction, b=outALU, sel=D1, out=InAReg);
    Or(a=InstA, b=D1, out=LoadAReg);
    ARegister(in=InAReg, load=LoadAReg, out=outAReg, out[0..14]=addressM);

    // Set D Register
    // InstC: if d2=1, store ALU Result to D Register
    And(a=instruction[4], b=InstC, out=D2);
    DRegister(in=outALU, load=D2, out=outDReg);

    // Set writeM
    // InstC: if d3=1, set ALU Result to Memory[A]
    And(a=instruction[3], b=InstC, out=writeM);

    Mux16(a=outAReg, b=inM, sel=RefM, out=InALU);
    ALU(x=outDReg, y=InALU, 
        zx=instruction[11], nx=instruction[10], // c1=zx, c2=nx
        zy=instruction[9], ny=instruction[8],   // c3=zy, c4=ny
	    f=instruction[7], no=instruction[6],    // c5=f,  c6=no
	    out=outM, out=outALU, 
	    zr=outALUzr, ng=outALUng);

    // InstC: check j1, j3, j3 and ALU result, to decide jmp to Address of A Register or not.
    And(a=instruction[2], b=InstC, out=J1);
    And(a=instruction[1], b=InstC, out=J2);
    And(a=instruction[0], b=InstC, out=J3);
    And(a=J1, b=outALUng, out=JLT);             //j1 == 1 and out<0, JLT
    And(a=J2, b=outALUzr, out=JEQ);             //j2 == 1 and out=0, JEQ
    
    Or(a=outALUng, b=outALUzr, out=outALUzrng); //out<=0
    Not(in=outALUzrng, out=outALUps);           //out>0, positive number
    And(a=J3, b=outALUps, out=JGT);             //j3==1 and out>0, JGT
    
    Or8Way(in[0]=JLT, in[1]=JEQ, in[3]=JGT, in[4..7]=false, out=JmpARegAddr);

    // if jmp, set A reg param to PC, other case is PC+1
    Not(in=JmpARegAddr, out=Cntup);
    PC(in=outAReg, load=JmpARegAddr, inc=Cntup, reset=reset, out[0..14]=pc);
}