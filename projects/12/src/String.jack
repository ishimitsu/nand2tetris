// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, maxlen;
    
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let str = Array.new(1); /** support zero-capacity */
        } else {
            let str = Array.new(maxLength);
        }
        let length = 0;
        let maxlen = maxLength;
        
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return ;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        var char c;
        if (j < maxlen) {
            let c = str[j];            
        } else {
            // do Output.printString("charAt: refer Invalid length!");              
            let c = 0;
        }
        return c;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < maxlen) {
            let str[j] = c;            
        } else {
            do Output.printString("setCharAt: Invalid length!");  
        }
        return ;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxlen) {
            let str[length] = c;
            let length = length + 1;
        } else {
            do Output.printString("appendChar: invalid length!");        
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Output.printString("eraseLastChar: string is empty!");              
        } else {
            let str[length] = null;
            let length = length - 1;
        }
        return ;
    }
    
    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, v, d;
        var boolean neg;

        let neg = false;
        let v = 0;        
        if (str[0] = 45) {
            let neg = true;
            let i = 1;            
        } else {
            let i = 0;            
        }

        while (i < length) {
            if ( (str[i] < 48) | (str[i] > 57) ) {
                do Output.printString("intValue: detected non digit  char!");
                return v;                
            } else {                
                /** '0' ~ '9' */
                let d = str[i] - 48;
                let v = Math.multiply(v, 10) + d;
                let i = i + 1;
            }
        }
        if(neg) {
            let v = ~(v) + 1;
        }
        
        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int  digit, lastdigit, i, j, m, n;
        var char c;
        var boolean neg;
        var Array tmp;

        let neg = false;
        if (val < 0) {
            let neg   = true;
            let digit = Math.abs(val);
        } else {
            let digit = val;            
        }

        let i   = 0;
        let tmp = Array.new(maxlen);
        while (i < maxlen) {
            let n = digit / 10;
            let m = n * 10;
            let lastdigit = digit - m;  /** n % 10 */
            // let lastdigit = Math.mod(digit, 10);
            let tmp[i]    = lastdigit + 48;
            let i = i + 1;
            let digit = n;
            
            if (digit < 10) {
                if(i < maxlen) {
                    let tmp[i] = digit + 48;
                    let i = i + 1;
                }
                if( (neg) & (i < maxlen) ) {
                    let tmp[i] = 45; // "-"
                    let i = i + 1;
                }
                
                let j = 0;
                while (j < i) {
                    let str[j] = tmp[(i-1) - j];
                    let j = j + 1;
                }

                let length = i;
                do tmp.dispose();  
                return ; 
            }
        }

        let length = i;
        do tmp.dispose();
        return ;
    }    

    /** Returns the new line character. */
    function char newLine() {
        var char c;
        let c = 128;
        return c;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        var char c;        
        let c = 129;
        return c;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        var char c;        
        let c = 34;
        return c;
    }
}
