// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {    
    // Memory Map of SCREEN
    static int scr_ram;
    // screen size
    static int scr_line, scr_col;
    static boolean scr_color;
    
    /** Initializes the Screen. */
    function void init() {
        let scr_ram   = 16384;
        let scr_line  = 256; // 0 <= line < 256
        let scr_col   = 512;  // 0 <= col  < 512
        let scr_color = true;
        return ;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int x, y, base, addr;
        let x = 0;
        let y = 0;
        while (y < scr_line) {
            let base = scr_ram + (y * 32);
            while (x < scr_col) {
                // let addr = base + (x / 16);
                let addr = base + x;   
                do Memory.poke(addr, 0);                
                let x = x + 16;  
            }
            let y = y + 1;
        }
        return ;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let scr_color = b;
        return ;
    }

    /** Draws the (x,y) pixel, using the current color. */
    /** "col % 16" bit of "Screen[row*32 + col/16] value" will affect row*col pixel. */
    /** Please check 5.2.4 */
    function void drawPixel(int x, int y) {
        var int addr, yMul32, xDiv16, xRem16, in, cur;
        let yMul32 = y * 32;
        let xDiv16 = x / 16;
        // let xRem16  = Math.mod(x, 16);                
        let xRem16 = x - (xDiv16 * 16);
        let addr   = scr_ram + yMul32 + xDiv16;
        let cur    = Memory.peek(addr);        

        if (scr_color) {
            let in = Math.setBit(cur, xRem16, 1);
        } else {
            let in = Math.setBit(cur, xRem16, 0);            
        }
        do Memory.poke(addr, in);
        return ;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, x, y, dx, dy, adyMinusbdx;
        var boolean xPlus, yPlus;
        let a  = 0;
        let b  = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let adyMinusbdx = 0;

        let xPlus = true;
        let yPlus = true;        
        if (dx < 0) {
            let xPlus = false;
            let dx    = Math.abs(dx);                        
        }
        if (dy < 0) {
            let yPlus = false;
            let dy    = Math.abs(dy);                    
        }

        if ( (dx > 0) & (dy > 0) ) {
            while ( (a < (dx+1)) & (b < (dy+1)) ) {
                if(xPlus) {
                    let x = x1 + a;
                } else {
                    let x = x1 - a;                    
                }
                if(yPlus) {
                    let y = y1 + b;
                } else {
                    let y = y1 - b;                    
                }
                do Screen.drawPixel(x, y);
                
                if (adyMinusbdx < 0) { // (a/dx) < (b/dy)
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        } else {
            if (dx = 0) {            
                while (b < (dy+1)) {            
                    if(yPlus) {
                        let y = y1 + b;
                    } else {
                        let y = y1 - b;                    
                    }
                    do Screen.drawPixel(x1, y);
                    let b = b + 1;
                }
            } else {
                // dy = 0
                while (a < (dx+1)) {
                    if(xPlus) {
                        let x = x1 + a;
                    } else {
                        let x = x1 - a;
                    }
                    do Screen.drawPixel(x, y1);
                    let a = a + 1;
                }
            }
        }
        
        return ;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int x;
        var int addr, yMul32, xDiv16, xRem16, in, allbit, bit, val;  

        let allbit = -1; // all 16bit = 1
        let val = 1;            
        if (scr_color) {
            let allbit = -1; // all 16bit = 1
            let val = 1;            
        } else {
            let allbit = 0;
            let val = 0;             
        }
        
        let x = x1;
        let yMul32 = y * 32;
        while (x < x2) {
            let xDiv16 = x / 16;
            let xRem16 = x - (xDiv16 * 16);                
            let addr   = scr_ram + yMul32 + xDiv16;            
            if ( (xRem16 = 0) & ( (x+16) < x2) ) {
                let in = allbit;
            } else {
                let bit = xRem16;
                let in  = Memory.peek(addr);
                // while ( (bit < 16) & ( (x + bit) < (x2 + xRem16) ) ) {                
                while ( (bit < 16) & ( (x + bit) < x2 ) {                
                    let in  = Math.setBit(in, bit, val);
                    let bit = bit + 1;
                }
            }
            do Memory.poke(addr, in);

            if (xRem16 = 0) {
                let x = x + 16;
            } else {
                let x = x + (16 - xRem16); // if x is indivisible, change to be enable divisible
            }
        }
        return ;
    }
    
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        // Precondition: x1 < x2, y1 < y2
        let y = y1;        
        while(y < y2) {
            // fill black or while
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        
        return ;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    // Bresenham    
    function void drawCircle(int x, int y, int r) {
        var int radius, dx, dy, center;
        var int xPlusdx, xMinusdx, yPlusdy, yMinusdy;
        if (r > 181) {
            let radius = 181; // r > 181 will overflow
        } else {
            let radius = r;
        }
        let dx = 0;
        let dy = radius;
        let center = 2 - (radius + radius); //initial "(x+1)^2 + (y-1)^2 -r^2"
        do Screen.drawPixel(x, y + radius);
        do Screen.drawPixel(x, y - radius);
        do Screen.drawPixel(x + radius, y);
        do Screen.drawPixel(x - radius, y); 
        do Screen.drawHorizontalLine(x - radius, x + radius, y);
        
        while ( (dy+1) > 0) {            
            if ( (center + dy) > 0) {
                let dy = dy - 1;
                let center = center + (1 - (dy + dy));  // x^2 + (y-1)^2 -r^2
            }
            if ( ((center - dx) - 1) < 0) { // center - cx <= 0
                let dx = dx + 1;
                let center = center + (1 + (dx + dx));  // (x+1)^2 + y^2 -r^2
            }
            
            if ( (dy+1) > 0) { // dy >= 0
                let xPlusdx  = x + dx;
                let xMinusdx = x - dx;
                let yPlusdy  = y + dy;
                let yMinusdy = y - dy;                
                do Screen.drawPixel(xPlusdx,  yPlusdy); // 0-90
                do Screen.drawPixel(xMinusdx, yPlusdy); // 90-180
                do Screen.drawPixel(xMinusdx, yMinusdy); // 180-270
                do Screen.drawPixel(xPlusdx,  yMinusdy); // 270-360

                do Screen.drawHorizontalLine(xMinusdx, xPlusdx, yPlusdy);
                do Screen.drawHorizontalLine(xMinusdx, xPlusdx, yMinusdy);
            }
        }
        
        return ;
    }
}
