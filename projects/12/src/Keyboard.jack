// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int ram_addr;
    
    /** Initializes the keyboard. */
    function void init() {
        let ram_addr = 24576;
        return ;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        var char key;
        let key = Memory.peek(ram_addr);
        if (key > 0) {
            return key;
        }
        return 0;
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char key, c;
        // show cursor
        // do Output.moveCursor(0, 0);
        let key = 0;

        // wait key pressed
        while (key = 0) {
            let key = Keyboard.keyPressed();
        }
        // wait key non-pressed
        let c = key;
        while (key = c) {
            let key = Keyboard.keyPressed();            
        }
        /* do Output.printChar(c); */
        /* do Output.moveCursorNext(); */
        
        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String s;
        var int i, max;
        var char c;
        let max = 64; // 1 line max words = 64, check Output.screen_col
        let s   = String.new(max); 
        let i   = 0;

        do Output.printString(message);
        while(i < max) {
            let c = Keyboard.readChar();
            if(c > 0) {
                if (c = 128) {
                    // Enter
                    do Output.println();
                    return s;
                } else {
                    if (c = 129) {
                        // Backspace
                        if ( (i - 1) > 0) {
                            do s.eraseLastChar();
                            do Output.backSpace();
                            let i = i - 1;
                        }
                    } else {
                        if ( (i + 1) < max) {
                            do s.appendChar(c);
                            do Output.printChar(c);
                            let i = i + 1;
                        }
                    }
                }
            }
        }

        return s; // 63 words
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String s;
        var int ret;
        let s   = Keyboard.readLine(message);
        let ret = s.intValue();
        return ret;
    }
}
